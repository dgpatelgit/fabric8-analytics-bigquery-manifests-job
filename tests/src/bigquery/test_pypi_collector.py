# Copyright Â© 2020 Red Hat Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Author: Dharmendra G Patel <dhpatel@redhat.com>
#
"""Test pypi manifests and extract dependencies."""
from src.bigquery.pypi_collector import PypiCollector

MANIFEST_START = """
#
# This file is autogenerated by pip-compile
# To update, run:
#
#    pip-compile --output-file=requirements.txt requirements.in
#
"""

DEP_1 = """
daiquiri==1.5.0
    # via -r requirements.in
"""

DEP_2 = """
pydantic==1.8.1
    # via -r requirements.in
"""


class TestPypiCollector:
    """Pypi collector test cases."""

    def test_single_dep(self):
        """Test single dep."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 1
        assert list(packages.keys())[0] == 'daiquiri'
        assert list(packages.values())[0] == 1

    def test_multiple_manifest_with_single_dep(self):
        """Test muitple manifest with same deps."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 1
        assert list(packages.keys())[0] == 'daiquiri'
        assert list(packages.values())[0] == 3

    def test_multiple_dep(self):
        """Test mutiple deps."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1 + DEP_2, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 1
        assert list(packages.keys())[0] == 'daiquiri, pydantic'
        assert list(packages.values())[0] == 1

    def test_multiple_manifest_multiple_dep(self):
        """Test multiple manifest with multiple deps."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1 + DEP_2, True)
        collector.parse_and_collect(MANIFEST_START + DEP_1 + DEP_2, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 1
        assert list(packages.keys())[0] == 'daiquiri, pydantic'
        assert list(packages.values())[0] == 2

    def test_multiple_manifests(self):
        """Test multiple manifests."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        collector.parse_and_collect(MANIFEST_START + DEP_2, True)
        collector.parse_and_collect(MANIFEST_START + DEP_1 + DEP_2, True)
        collector.parse_and_collect(MANIFEST_START + DEP_1 + DEP_2, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 3
        assert list(packages.keys())[0] == 'daiquiri, pydantic'
        assert list(packages.keys())[1] == 'daiquiri'
        assert list(packages.keys())[2] == 'pydantic'

    def test_empty_manifest(self):
        """Test empty / invalid manifest."""
        collector = PypiCollector()
        collector.parse_and_collect(None, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 0

    def test_valid_and_empty_manifest(self):
        """Test a mix of empty and valid manifests."""
        collector = PypiCollector()
        collector.parse_and_collect(MANIFEST_START + DEP_1, True)
        collector.parse_and_collect(None, True)
        packages = dict(collector.counter.most_common())
        assert len(packages) == 1
        assert list(packages.keys())[0] == 'daiquiri'
        assert list(packages.values())[0] == 1
